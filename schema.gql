# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AccessToken {
  access_token: String!
}

type Auth {
  access_token: String
  email: String
  password: String!
}

type CreateProduct {
  _id: ObjectId
  amount: Float!
  content: String!
  create_at: Timestamp
  creator: ID!
  id: ID!
  isRemove: Boolean!
  price: Float!
  title: String!
  update_at: Timestamp
}

type CreateUser {
  _id: ObjectId
  access_token: String!
  create_at: Timestamp
  email: String!
  id: ID!
  name: String!
  roles: [Role!]!
  update_at: Timestamp
}

type Creator {
  _id: ObjectId
  create_at: Timestamp
  email: String!
  name: String!
  roles: [Role!]!
  update_at: Timestamp
}

type Customer {
  _id: ObjectId
  create_at: Timestamp
  email: String!
  name: String!
  orders: [String!]
  roles: [Role!]!
  update_at: Timestamp
}

type Default {
  _id: ObjectId
  create_at: Timestamp
  update_at: Timestamp
}

type FindUser {
  _id: ObjectId
  access_token: String!
  create_at: Timestamp
  email: String!
  id: ID!
  name: String!
  orders: [TypeOrder!]!
  roles: [Role!]!
  update_at: Timestamp
}

input InputAccessToken {
  access_token: String!
}

input InputAddOrRemoveOrder {
  id: ID!
  itemId: [ID!]!
  where: String!
}

input InputAddOrRemoveRoleUser {
  id: ID!
  role: Role
}

input InputAddOrRemoveUser {
  id: ID!
  itemId: [ID!]!
  where: String!
}

input InputCreateOrder {
  customer: ID!
  price: Float!
  products: [ID!]!
}

input InputCreateProduct {
  amount: Float!
  content: String!
  creator: String!
  price: Float!
  title: String!
}

input InputCreateUser {
  email: String!
  name: String!
  password: String!
}

input InputFindUser {
  email: String
  id: ID
}

input InputID {
  id: ObjectId!
}

input InputLogin {
  email: String!
  password: String!
}

input InputOrderId {
  id: ID!
}

input InputProductId {
  id: ID!
}

input InputUpdateOrder {
  id: ID!
  isRemove: Boolean
  paid: Boolean
  processed: Boolean
  received: Boolean
  sent: Boolean
}

input InputUpdateProduct {
  amount: Float
  content: String
  id: ID!
  price: Float
  title: String
}

input InputUpdateUser {
  email: String
  id: ID!
  name: String
}

type Mutation {
  addItemToUser(data: InputAddOrRemoveUser!): FindUser!
  addRoleToUser(data: InputAddOrRemoveRoleUser!): FindUser!
  addToOrder(data: InputAddOrRemoveOrder!): Order!
  createOrder(data: InputCreateOrder!): Order!
  createProduct(data: InputCreateProduct!): CreateProduct!
  createUser(data: InputCreateUser!): CreateUser!
  refresh(data: InputAccessToken!): AccessToken!
  removeFromOrder(data: InputAddOrRemoveOrder!): Order!
  removeRoleToUser(data: InputAddOrRemoveRoleUser!): FindUser!
  updateOrder(data: InputUpdateOrder!): Order!
  updateProduct(data: InputUpdateProduct!): UpdateProduct!
  updateUser(data: InputUpdateUser!): FindUser!
}

"""Mongo object id scalar type"""
scalar ObjectId

type Order {
  _id: ObjectId
  create_at: Timestamp
  customer: TypeUser!
  id: ID
  isRemove: Boolean!
  paid: Boolean!
  price: Float!
  processed: Boolean!
  products: [Products!]!
  received: Boolean!
  sent: Boolean!
  update_at: Timestamp
}

type OrderDefault {
  _id: ObjectId
  create_at: Timestamp
  isRemove: Boolean!
  paid: Boolean!
  price: Float!
  processed: Boolean!
  received: Boolean!
  sent: Boolean!
  update_at: Timestamp
}

type OrderId {
  id: ID!
}

type Product {
  _id: ObjectId
  amount: Float!
  content: String!
  create_at: Timestamp
  creator: User!
  id: ID!
  isRemove: Boolean!
  price: Float!
  title: String!
  update_at: Timestamp
}

type ProductDefault {
  _id: ObjectId
  amount: Float!
  content: String!
  create_at: Timestamp
  isRemove: Boolean!
  price: Float!
  title: String!
  update_at: Timestamp
}

type ProductId {
  id: ID!
}

type Products {
  _id: ObjectId
  amount: Float!
  content: String!
  create_at: Timestamp
  creator: Creator!
  isRemove: Boolean!
  price: Float!
  title: String!
  update_at: Timestamp
}

type Query {
  findOrder(data: InputOrderId!): Order!
  findProduct(data: InputID!): Products!
  findUser(data: InputFindUser!): FindUser!
  getOrders: [Order!]!
  getOrdersUserId(data: InputOrderId!): [Order!]!
  getProducts: [Products!]!
  getUsers: [FindUser!]!
  login(data: InputLogin!): User!
}

"""The basic roles for users"""
enum Role {
  ADMIN
  USER
}

"""
The javascript `Date` as integer. Type represents date and time as number of milliseconds from start of UNIX epoch.
"""
scalar Timestamp

type TypeOrder {
  _id: ObjectId
  create_at: Timestamp
  customer: ObjectId!
  isRemove: Boolean!
  paid: Boolean!
  price: Float!
  processed: Boolean!
  products: [TypeProduct!]!
  received: Boolean!
  sent: Boolean!
  update_at: Timestamp
}

type TypeProduct {
  _id: ObjectId
  amount: Float!
  content: String!
  create_at: Timestamp
  creator: ObjectId!
  isRemove: Boolean!
  price: Float!
  title: String!
  update_at: Timestamp
}

type TypeUser {
  _id: ObjectId
  create_at: Timestamp
  email: String!
  id: ID!
  name: String!
  orders: [String!]!
  roles: [Role!]!
  update_at: Timestamp
}

type UpdateProduct {
  _id: ObjectId
  amount: Float!
  content: String!
  create_at: Timestamp
  creator: Creator!
  isRemove: Boolean!
  price: Float!
  title: String!
  update_at: Timestamp
}

type User {
  _id: ObjectId
  access_token: String!
  create_at: Timestamp
  email: String!
  id: ID!
  name: String!
  orders: [TypeOrder!]!
  roles: [Role!]!
  update_at: Timestamp
}

type UserDefault {
  _id: ObjectId
  create_at: Timestamp
  email: String!
  name: String!
  roles: [Role!]!
  update_at: Timestamp
}
